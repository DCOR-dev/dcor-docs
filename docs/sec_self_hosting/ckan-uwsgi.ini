[uwsgi]

; Since we are behind a webserver (proxy), we use the socket variant.
; We use HTTP1.1 (keep-alives)
http11-socket          =  127.0.0.1:8080
uid                    =  www-data
gid                    =  www-data
wsgi-file              =  /etc/ckan/default/wsgi.py
virtualenv             =  /usr/lib/ckan/default
module                 =  wsgi:application
master                 =  true
pidfile                =  /tmp/%n.pid
harakiri               =  3600
; Restart workers after this many requests
max-requests           =  1000
; How long to wait before forcefully killing workers
worker-reload-mercy    =  30
; Delete sockets during shutdown
vacuum                 =  true
callable               =  application
; Disable threads only if not using threads and performance is critical
enable-threads         =  false
; Do not use multiple interpreters (since we only have one service)
single-interpreter     =  true
; Shutdown when receiving SIGTERM
die-on-term            =  true
; Fail to start if application cannot load
need-app               =  true
; Make sure all options in this file exist.
strict                 =  true

; Unfortunately, buffering the upload with nginx and then sending the upload
; to uWSGI does not work for some reason (uWSGI gets stuck when crunching the
; data). The intuitive choice would be to set this here to "1", but a look
; at the sources reveals that this should be set to the buffer size (2MB).
post-buffering         =  2097152
post-buffering-bufsize =  2097152

; Reduce or increase this number to limit POST requests. By default,
; the size of POST requests is unlimited.
limit-post             =  100000000000

; Set the number of workers to something > 1, otherwise
; only one client can connect via nginx to uWSGI at a time.
; See https://github.com/ckan/ckan/issues/5933
; In addition, use two threads per worker.
workers                =  4
harakiri-verbose       =  true
; Use lazy apps to avoid the `__Global` error.
; See https://github.com/ckan/ckan/issues/5933#issuecomment-809114593
lazy-apps              =  true
; If we don't want to cache the files that users want to download
; (i.e. set `proxy_max_temp_file_size 0;` in nginx), then we have to
; set socket-timeout to a very large number (e.g. 7200).
; We may also want to increase this number if the storage location for
; resources has a low write speed (e.g. NFS). From the uWSGI sources,
; it looks like the default value is 4s.
socket-timeout         =  500
; (Note that we are serving CKAN via http11-socket behind nginx).
; Otherwise, downloads will fail with `uwsgi_response_sendfile_do() TIMEOUT !!!`,
; because the client cannot download the file from nginx as fast as
; uWSGI can send the file to nginx. But in this case, we can really only
; have as many connections as we have workers.
; On the other hand, if we, set `proxy_max_temp_file_size 100000m;`
; in nginx, then all downloads will be cached by nginx. And nginx will
; handle all users. The purpose of setting `workers` to `4` in uWSGI
; is now only so that CKAN does not block for as long as it takes the
; system to copy the download from uwsgi to nginx's `proxy_temp_path`.
; In other words, CKAN will only be unresponsive if 4 downloads are
; started at the same time for as long as it takes the smallest download
; to be copied over the http socket from uWSGI to nginx.

; Custom logging
; disable logging in general (files easily get above 50MB)
disable-logging        =  true
; enable logging for a few specific cases
log-4xx                =  true
log-5xx                =  true
log-ioerror            =  true
; set the log format to match that of CKAN
log-date               =  %%Y-%%m-%%d %%H:%%M:%%S
logformat-strftime     =  true
logformat              =  %(ftime) uWSGI %(addr) (%(proto) %(status)) %(method) %(uri) => %(size) bytes in %(msecs) msecs to %(uagent)
threaded-logger        =  true
